{"ast":null,"code":"// import React, { useCallback, useEffect, useState } from \"react\";\n// import { useMutation, useQuery, gql } from '@apollo/client';\n// const REPOSITORIES_QUERY = gql`\n//   query MyRepositories ($first: Int!){\n//     viewer { \n//       name\n//       repositories (first: $first){\n//         nodes {\n//           id\n//           name\n//           viewerHasStarred\n//           stargazers {\n//             totalCount\n//           }\n//         }\n//       }\n//     }\n//   }\n// `;\n// const ADD_START = gql`\n//   mutation AddStart($starrableId: ID!) {\n//     addStar(input: {\n//       starrableId: $starrableId\n//     }) {\n//       starrable {\n//         stargazers {\n//           totalCount\n//         }\n//       }\n//     }\n//   }\n// `;\n// const REMOVE_START = gql`\n//   mutation RemoveStart($starrableId: ID!) {\n//     removeStar(input: {\n//       starrableId: $starrableId\n//     }) {\n//       starrable {\n//         stargazers {\n//           totalCount\n//         }\n//       }\n//     }\n//   }\n// `;\n// const Projects = () => {\n//   const [first, setFirst] = useState(1);\n//   const { data, refetch } = useQuery(REPOSITORIES_QUERY, { variables: { first } });\n//   const [addStar] = useMutation(ADD_START, {\n//     refetchQueries: [ REPOSITORIES_QUERY ]\n//   });\n//   const [removeStar] = useMutation(REMOVE_START, {\n//     refetchQueries: [ REPOSITORIES_QUERY ]\n//   });\n//   const memoizedRefetch = useCallback(() => {\n//     refetch();\n//   }, [refetch]);\n//   useEffect(() => {\n//     if(first > 1) {\n//       memoizedRefetch();\n//     }\n//   }, [first, memoizedRefetch]);\n//   return (\n//     <>\n//       <section className=\"grid\" style={{\"--bs-columns\": 4, \"--bs-gap\": '10px 0'}}>\n//         <span>{'Repository name'}</span>\n//         <span className=\"g-col-3\">{'Stars count'}</span>\n//         {data?.viewer?.repositories?.nodes?.map(({ name, stargazers, id, viewerHasStarred }) => (\n//         <>\n//           <span>{name}</span>\n//           <span>{stargazers.totalCount}</span>\n//           <span className=\"g-col-2\">\n//             {viewerHasStarred ? <button className=\"btn btn-dark\" onClick={() => removeStar({ variables: { starrableId: id } })}>Remove star</button> \n//             : <button className=\"btn btn-dark\" onClick={() => addStar({ variables: { starrableId: id } })}>Add star</button>}\n//           </span>\n//         </>\n//         ))}\n//       </section>\n//       <button className=\"btn btn-primary\" onClick={() => setFirst(first + 1)}>Load more</button>\n//     </>\n//   )\n// };\n// export default Projects;","map":{"version":3,"sources":["C:/Users/ASUS/OneDrive/Escritorio/front04/FRONT/src/Inscripciones/AprobarInscrip.jsx"],"names":[],"mappings":"AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useCallback, useEffect, useState } from \"react\";\r\n// import { useMutation, useQuery, gql } from '@apollo/client';\r\n\r\n\r\n// const REPOSITORIES_QUERY = gql`\r\n//   query MyRepositories ($first: Int!){\r\n//     viewer { \r\n//       name\r\n//       repositories (first: $first){\r\n//         nodes {\r\n//           id\r\n//           name\r\n//           viewerHasStarred\r\n//           stargazers {\r\n//             totalCount\r\n//           }\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const ADD_START = gql`\r\n//   mutation AddStart($starrableId: ID!) {\r\n//     addStar(input: {\r\n//       starrableId: $starrableId\r\n//     }) {\r\n//       starrable {\r\n//         stargazers {\r\n//           totalCount\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const REMOVE_START = gql`\r\n//   mutation RemoveStart($starrableId: ID!) {\r\n//     removeStar(input: {\r\n//       starrableId: $starrableId\r\n//     }) {\r\n//       starrable {\r\n//         stargazers {\r\n//           totalCount\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\n// const Projects = () => {\r\n//   const [first, setFirst] = useState(1);\r\n//   const { data, refetch } = useQuery(REPOSITORIES_QUERY, { variables: { first } });\r\n//   const [addStar] = useMutation(ADD_START, {\r\n//     refetchQueries: [ REPOSITORIES_QUERY ]\r\n//   });\r\n//   const [removeStar] = useMutation(REMOVE_START, {\r\n//     refetchQueries: [ REPOSITORIES_QUERY ]\r\n//   });\r\n\r\n//   const memoizedRefetch = useCallback(() => {\r\n//     refetch();\r\n//   }, [refetch]);\r\n\r\n//   useEffect(() => {\r\n//     if(first > 1) {\r\n//       memoizedRefetch();\r\n//     }\r\n//   }, [first, memoizedRefetch]);\r\n\r\n//   return (\r\n//     <>\r\n//       <section className=\"grid\" style={{\"--bs-columns\": 4, \"--bs-gap\": '10px 0'}}>\r\n//         <span>{'Repository name'}</span>\r\n//         <span className=\"g-col-3\">{'Stars count'}</span>\r\n//         {data?.viewer?.repositories?.nodes?.map(({ name, stargazers, id, viewerHasStarred }) => (\r\n//         <>\r\n//           <span>{name}</span>\r\n//           <span>{stargazers.totalCount}</span>\r\n//           <span className=\"g-col-2\">\r\n//             {viewerHasStarred ? <button className=\"btn btn-dark\" onClick={() => removeStar({ variables: { starrableId: id } })}>Remove star</button> \r\n//             : <button className=\"btn btn-dark\" onClick={() => addStar({ variables: { starrableId: id } })}>Add star</button>}\r\n//           </span>\r\n//         </>\r\n//         ))}\r\n//       </section>\r\n//       <button className=\"btn btn-primary\" onClick={() => setFirst(first + 1)}>Load more</button>\r\n//     </>\r\n//   )\r\n// };\r\n\r\n// export default Projects;"]},"metadata":{},"sourceType":"module"}